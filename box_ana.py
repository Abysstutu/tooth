# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'top-half.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QImageReader,QColor,QPen
from PyQt5.QtWidgets import QWidget, QApplication, QVBoxLayout, QHBoxLayout, QPushButton, QLabel, QFileDialog
from PyQt5.Qt import QPixmap, QPoint, Qt, QPainter, QIcon
from PyQt5.QtGui import QPixmap,QImage,QPainter,QCursor
from PyQt5.QtCore import QSize
import show_points as sp
import cv2
import math
import numpy as np


class ImageBoxana(QWidget):
    def __init__(self):
        super(ImageBoxana, self).__init__()
        self.img = None
        self.image = None
        self.scaled_img = None
        self.point = QPoint(0, 0)
        self.points = {}
        self.del_point = ()
        self.start_pos = None
        self.end_pos = None
        self.left_click = False
        self.right_click = False
        self.del_pos = None
        self.scale = 1
        self.x = 0
        self.y = 0
        self.channel= None
        self.radius = 0  # 圆的半径
        self.color = (0, 0, 0)  # 红色
        self.thickness = 0  # 填充整个圆
        self.ana = False
        self.del_key = None
        self.file_path = None
        self.setMouseTracking(True)

    def init_ui(self):
        self.setWindowTitle("ImageBoxana")

    def set_image(self, img_path):
        """
        open image file
        :param img_path: image file path
        :return:
        """
        # img = QImageReader(img_path)
        # img.setScaledSize(QSize(self.size().width(), self.size().height()))
        # img = img.read()
        self.scaled_img = None
        self.left_click = False
        self.right_click = False
        self.point = QPoint(0, 0)
        self.scale = 1
        self.image = cv2.imread(img_path)
        self.height, self.width, self.channel = self.image.shape
        self.image_show = np.ones((self.height, self.width, 3), dtype=np.uint8) * 255  # All pixels set to white

        # Draw axes
        cv2.line(self.image_show, (10, 0), (10,math.ceil(self.height)), (0, 0, 0), 2)  # y-axis in black
        cv2.line(self.image_show, (0, 10), (math.ceil(self.width), 10), (0, 0, 0), 2)  # x-axis in black

        # Draw ticks
        for x in range(0, self.width, 100):
            cv2.line(self.image_show, (x, -5), (x, 5), (0, 0, 0), 1)  # ticks in black
        for y in range(0, self.height, 100):
            cv2.line(self.image_show, (-5, y), (5, y), (0, 0, 0), 1)  # ticks in black

        img = cv2.cvtColor(self.image_show, cv2.COLOR_BGR2RGB)
        bytes_per_line = 3 * self.width
        q_image = QImage(img.data, self.width, self.height, bytes_per_line, QImage.Format_RGB888)
        self.img = QPixmap(q_image)
        self.scaled_img = self.img


    def show_image(self,img,width,height,bytes_per_line):
        q_image = QImage(img.data, width, height,bytes_per_line, QImage.Format_BGR888)
        self.img = QtGui.QPixmap(q_image)
        self.scaled_img = self.img
        self.update()


    def show_camera(self,pixmap):
        self.img = QtGui.QPixmap(pixmap)
        self.scaled_img = self.img
        self.update()



    def paintEvent(self, event):
        super().paintEvent(event)
        """
        receive paint events
        :param e: QPaintEvent
        :return:
        """
        if self.scaled_img:
            painter = QPainter(self)
            painter.begin(self)
            painter.scale(self.scale, self.scale)
            painter.drawPixmap(self.point, self.scaled_img)
            painter.end()


    def wheelEvent(self, event):
        angle = event.angleDelta() / 8  # 返回QPoint对象，为滚轮转过的数值，单位为1/8度
        angleY = angle.y()
        # 获取当前鼠标相对于view的位置
        if angleY > 0:
            self.scale *= 1.1
        else:  # 滚轮下滚
            self.scale *= 0.9

        self.adjustSize()
        self.update()



    def mouseMoveEvent(self, e):
        """
        mouse move events for the widget
        :param e: QMouseEvent
        :return:
        """

        if self.left_click:
            self.end_pos = e.pos() - self.start_pos
            self.point = self.point + self.end_pos
            self.start_pos = e.pos()
            self.update()

    def mousePressEvent(self, e):
        """
        mouse press events for the widget
        :param e: QMouseEvent
        :return:
        """
        if e.button() == Qt.LeftButton:
                self.left_click = True
                self.start_pos = e.pos()
        if e.button() == Qt.RightButton and self.right_click is not True:
            if self.ana:
                self.right_click = True
                self.delpoint(e.pos())



    def mouseReleaseEvent(self, e):
        """
        mouse release events for the widget
        :param e: QMouseEvent
        :return:
        """
        if e.button() == Qt.LeftButton:
            self.left_click = False

    def add_point(self, points):
        self.points = points
        self.radius = 10 # 圆的半径
        self.color = (0, 0, 255)  # 红色
        self.thickness = -1  # 填充整个圆
        image = self.image_show
        for key,point in self.points.items():
            if key == 'None':
                continue
            else:
                cv2.circle(image, point,self.radius, self.color, self.thickness)
                cv2.putText(image,f'{key}', point, cv2.FONT_HERSHEY_SIMPLEX, 1.7,(0, 0, 255), 5)



        img = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
        # 转换为 QImage
        bytes_per_line = 3 * self.width
        q_image = QImage(img.data, self.width, self.height, bytes_per_line, QImage.Format_RGB888)
        self.img = QtGui.QPixmap(q_image)
        self.scaled_img = self.img
        self.update()

    def selfclear(self):
        self.scaled_img = None
        self.file_path = 'background/white.png'
        self.left_click = False
        self.right_click = False
        self.point = QPoint(0, 0)
        self.scale = 1
        self.img = QPixmap('background/white.png')
        self.image = cv2.imread('background/white.png')
        self.scaled_img = self.img

    def saveimg(self):
        return self.img









